import { db, set, ref } from './firebase-init.js';document.addEventListener('DOMContentLoaded', () => {    const uploadButton = document.getElementById('upload-button');    const m3uFileInput = document.getElementById('m3u-file');    const uploadStatus = document.getElementById('upload-status');    uploadButton.addEventListener('click', async () => {        const file = m3uFileInput.files[0];        if (!file) {            uploadStatus.textContent = 'Por favor, selecione um arquivo.';            return;        }        uploadStatus.textContent = 'Lendo o arquivo...';        const content = await file.text();        uploadStatus.textContent = 'Processando a lista M3U...';        const channels = parseM3U(content);        uploadStatus.textContent = 'Enviando para o banco de dados...';        try {            await set(ref(db, 'channels'), channels);            uploadStatus.textContent = 'Lista enviada com sucesso!';        } catch (error) {            console.error('Erro ao enviar para o banco de dados:', error);            uploadStatus.textContent = 'Erro ao enviar para o banco de dados.';        }    });    function parseM3U(content) {        const lines = content.split('\n');        const channels = { filmes: [], series: {}, tv: [] };        let currentChannel = null;        for (let i = 0; i < lines.length; i++) {            const line = lines[i].trim();            if (line.startsWith('#EXTINF:')) {                const titleMatch = line.match(/,(.+)/);                const groupMatch = line.match(/group-title="([^"]+)"/i);                const logoMatch = line.match(/tvg-logo="([^"]+)"/i);                const title = titleMatch ? titleMatch[1].trim() : 'Canal Desconhecido';                currentChannel = {                    title,                    url: '',                    group: groupMatch ? groupMatch[1].toLowerCase() : '',                    logo: logoMatch ? logoMatch[1] : ''                };            } else if (line && !line.startsWith('#') && currentChannel) {                currentChannel.url = line;                categorizeChannel(currentChannel, channels);                currentChannel = null;            }        }        return channels;    }    function categorizeChannel(channel, channels) {        const title = channel.title.toLowerCase();        const category = channel.group.toLowerCase();        if (category.includes('serie') || category.includes('série') || /s\d+\s*e\d+/i.test(title) || /season|episode|episódio|temporada/i.test(title)) {            let seriesName, season, episodeTitle;            const match = title.match(/^(.*?)\s*s(\d+)\s*e(\d+)/i);            if (match) {                seriesName = normalizeTitle(match[1]);                season = match[2];                episodeTitle = `Episódio ${match[3]}`;            } else {                seriesName = normalizeTitle(title.split(/ s\d+| season| episódio/i)[0]);                season = "1";                episodeTitle = normalizeTitle(title);            }            const seriesKey = seriesName.toLowerCase();            if (!channels.series[seriesKey]) {                channels.series[seriesKey] = { displayName: seriesName, seasons: {}, logo: channel.logo };            }            if (!channels.series[seriesKey].seasons[season]) {                channels.series[seriesKey].seasons[season] = [];            }            channels.series[seriesKey].seasons[season].push({ title: episodeTitle, url: channel.url, logo: channel.logo });        } else if (category.includes('filme') || category.includes('movie') || /movie|filme/i.test(title)) {            channels.filmes.push({ title: normalizeTitle(channel.title), url: channel.url, logo: channel.logo });        } else {            channels.tv.push({ title: normalizeTitle(channel.title), url: channel.url, logo: channel.logo });        }    }    function normalizeTitle(title) {        return title.trim().replace(/\b\w/g, c => c.toUpperCase());    }});